[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "deepoo"
version = "0.1.0"
description = "DNN Semantic Segmentation for Mobile (TensorFlow Lite)"
readme = "README.md"
requires-python = ">=3.9"
authors = [
  { name = "DeepOO Team" }
]
license = { file = "LICENSE" }
keywords = ["semantic-segmentation", "tensorflow", "tflite", "computer-vision"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
# Keep existing imports working by installing the top-level package as "src"
# (the code currently uses imports like `from src.model.deeplab import ...`).
dependencies = [
  "Pillow==11.2.1",
  "numpy==2.1.3",
  "tensorflow-cpu==2.19.0",
  "matplotlib==3.10.3",
  "opencv-python==4.12.0.88",
  "tqdm>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/deepoo-1"

[project.scripts]
# CLI entry points mapping to existing main() functions
# Training script currently does not define main(); use python -m src.train for now
deepoo-evaluate = "src.evaluate:main"
deepoo-export-tflite = "src.export_tflite:main"
deepoo-evaluate-tflite = "src.evaluate_tflite:main"
deepoo-merge-datasets = "src.data.merge_datasets:main"

[tool.setuptools]
# Use the "src" layout but expose the top-level package name as "src" to preserve imports
# This discovers packages that have an __init__.py inside the project ./src directory
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["notebooks*", "data*", "models*", "configs*", ".git*"]
